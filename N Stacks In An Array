#include <bits/stdc++.h> 

// Steps
// find index
// update freespot
// insert value in arrary
// update next by previous top
// update top

class NStack
{
public:
    
    int *arr;
    int *top;
    int *next;

    int n,s;
    int freeSpot;

    // Initialize your data structure.
    NStack(int N, int S)
    {
        n=N;
        s=S;
        arr = new int[s];
        // At starting - point to next free space
        // after insertion - point to next element after stack top(means previous index)
        next = new int[s];
        top = new int[n];

        //top initialise
        for(int i=0; i<n; i++){
            top[i] = -1;
        }
        
        //next initialise
        for(int i=0; i<s-1; i++){
            next[i] = i+1;
        }
        //update last index value to -1
        next[s-1] = -1;

        //initialise freespot
        freeSpot = 0;
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m)
    {
        //check for overflow
        if(freeSpot == -1) {
            return false;
        }

        //find index
        int index = freeSpot;

        //insert element into array
        arr[index] = x;

        //update freespot
        freeSpot = next[index];

        //update next
        next[index] = top[m-1];

        //update top
        top[m-1] = index;

        return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m)
    {
        //check underflow condition
        if(top[m-1] == -1) {
            return -1;
        }

        int index = top[m-1];

        top[m-1] = next[index];

        next[index] = freeSpot;

        freeSpot = index;

        return arr[index];
    }
};
